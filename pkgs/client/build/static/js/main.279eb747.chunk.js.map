{"version":3,"sources":["../../../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","../../../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","model/action.model.ts","state/actions/scoreboard.action.ts","state/actions/ui.action.ts","state/actions/record.action.ts","gql/subscriptions/index.ts","model/scoreboard.model.ts","components/Scoreboard/Scoreboard.tsx","model/vehicle.model.ts","gql/queries/record.queries.ts","components/LicensePlate/LicensePlate.tsx","gql/mutations/record.mutations.ts","gql/queries/customer.queries.ts","components/Form/CustomerSuggestions.tsx","gql/mutations/customer.mutations.ts","components/Form/NewCustomerForm.tsx","components/Form/CustomerForm.tsx","components/Record/RecordItem.tsx","components/Form/RecordedWeight.tsx","gql/queries/vehicle.queries.ts","components/Form/VehicleSuggestions.tsx","gql/mutations/vehicle.mutations.ts","components/Form/NewVehicleForm.tsx","components/Form/LicensePlateForm.tsx","components/Form/SelectedVehicleCard.tsx","components/Form/SelectedCustomerCard.tsx","components/Form/Form.tsx","components/Record/RecordList.tsx","pages/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","state/actors/index.ts","state/actors/scroeboard.actor.ts","state/actors/record.actor.ts","state/actors/ui.actor.ts","state/store.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Actions","updateReading","reading","dispatch","type","UPDATE_SCOREBOARD","payload","updateUIState","state","UPDATE_UI_STATE","updateRecordDraft","UPDATE_RECORD_DRAFT","updateRecordResult","UPDATE_RECORD_RESULT","updateRecordQuery","UPDATE_RECORD_QUERY","deleteRecordDraft","DELETE_RECORD_DRAFT","SUBSCRIBE_READING","gql","STATUS_CODES","connect","scoreboard","ui","props","sub","useSubscription","now","useRef","useEffect","socket","io","process","manualInput","error","receivedAt","Date","getTime","weight","manual","status","loading","data","on","console","log","setInterval","current","off","isManualInput","className","classNames","Math","abs","warn","onClick","setTimeout","$","focus","toggleManualInput","color","icon","create","speedometer","autofocus","clearInput","onIonChange","ev","detail","value","placeholder","toLocaleString","PLATE_CODES","PLATE_REGIONS","name","VEHICLE_TYPES","FETCH_RECORDS","FETCH_RECORD","LicensePlate","number","region","slice","CREATE_RECORD","ADD_SECOND_WEIGHT","ADD_CUSTOMER","PRINT_RECORD","SEND_CONFIRMATION_SMS","FETCH_CUSTOMERS","FETCH_CUSTOMER","draft","record","recordDraft","suggestions","useQuery","variables","phoneNumber","party","seller","buyer","limit","fetchPolicy","customers","length","lines","customer","button","onSelectCustomer","display","CREATE_CUSTOMER","useMutation","runCreateCustomer","expand","plate","customerId","createCustomer","catch","alert","disabled","addOutline","noTitle","fill","skip","skipSeller","skipBuyer","chevronForward","split","join","trim","target","refetch","debounce","maxlength","size","required","filter","suggestion","printRecord","sendConfirmationSms","runCreateRecord","addSecondWeightMutation","addCustomerMutation","useState","showPrintingToast","setPrinting","isResultPaid","setResultPaid","useIonPopover","onHide","onSendSMS","send","onPrint","print","dismissPopover","presentPopover","recordQuery","formatDate","date","moment","format","weightDraft","secondWeightDraft","recordId","makeNewRecord","weightTime","vehicleId","vehicle","sellerId","undefined","buyerId","update","cache","result","createRecord","readQuery","query","writeQuery","records","addCustomer","addCustomerForm","resetCustomerForm","isSynced","isLoaded","serial","licensePlate","personAddOutline","weights","createdAt","isAfter","subtract","shape","refreshOutline","from","firstWeight","secondWeight","getNetWeight","getPrice","slot","isBefore","alertCircleOutline","fromNow","toString","event","nativeEvent","menuOutline","closeOutline","customerType","cssClass","isOpen","onDidDismiss","message","duration","isUpdated","isOutdated","closeCircleOutline","onRecord","FETCH_VEHICLES","FETCH_VEHICLE","vehicles","selectedVehicleRecords","onSelectPlate","CREATE_VEHICLE","runCreateVehicle","i","selectVehicleType","isNaN","plateNumber","plateCode","plateRegion","createVehicle","toUpperCase","page","pattern","interface","index","selectedVehicle","onClear","getVehicleType","recordResult","selectedRecord","clearForm","recordReading","input","find","first","trigger","val","addParty","partyType","reloadOutline","speedometerOutline","updateRecordList","UPDATE_RECORD_LIST","recordsQuery","recordQueryLicensePlate","filters","_","recordFilters","includes","toggleFilter","hourglassOutline","calendarClearOutline","chevronBack","ceil","count","floor","Home","home","carOutline","peopleOutline","statsChartOutline","settingsOutline","errorLink","onError","graphQLErrors","serverPort","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","definition","getMainDefinition","kind","operation","client","ApolloClient","InMemoryCache","typePolicies","Record","fields","read","App","ApolloProvider","exact","path","to","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","actors","combineReducers","action","RESET_SCOREBOARD","capture","recordList","componentEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGAAA,IAAIA,EAAM,CACT,8BAA+B,CAC9B,IACA,GAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,0BAA2B,CAC1B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B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","file":"static/js/main.279eb747.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t186,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t187,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t188,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t189,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t190,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t191,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t192,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t193,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t194,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t195,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t196,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t197,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t198,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t199,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t200,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t201,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t202,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t203,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t204,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t205,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t206,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t207,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t208,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t209,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t210,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t211,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t212,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t213,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t214,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t215,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t216,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t217,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t218,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t219,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t220,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t221,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t222,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t223,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t224,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t225,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t226,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t227,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t228,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 134;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t229,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 136;\nmodule.exports = webpackAsyncContext;","export enum Actions {\n  UPDATE_SCOREBOARD = 'UPDATE_SCOREBOARD',\n  UPDATE_RECORD_DRAFT = 'UPDATE_RECORD_DRAFT',\n  UPDATE_RECORD_RESULT = 'UPDATE_RECORD_RESULT',\n  UPDATE_RECORD_QUERY = 'UPDATE_RECORD_QUERY',\n  UPDATE_RECORD_LIST = 'UPDATE_RECORD_LIST',\n  UPDATE_UI_STATE = 'UPDATE_UI_STATE',\n  RESET_RECORD_DRAFT = 'RESET_RECORD_DRAFT',\n  RESET_SCOREBOARD = 'RESET_SCOREBOARD',\n  CAPTURE_READING = 'CAPTURE_READING',\n  DELETE_RECORD_DRAFT = 'DELETE_RECORD_DRAFT',\n}\n","import { Actions } from '../../model/action.model'\n\nexport const updateReading = (reading: any) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_SCOREBOARD,\n    payload: reading,\n  })\n","import { Actions } from '../../model/action.model'\n\nexport const updateUIState = (state: any) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_UI_STATE,\n    payload: state,\n  })\n","import { Actions } from '../../model/action.model'\nimport { RecordDraft } from '../../model/record.model'\n\nexport const updateRecordDraft = (payload: RecordDraft) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_RECORD_DRAFT,\n    payload,\n  })\n\nexport const updateRecordResult = (payload: string) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_RECORD_RESULT,\n    payload,\n  })\n\nexport const updateRecordQuery = (payload: string) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_RECORD_QUERY,\n    payload,\n  })\n\nexport const updateRecordList = (payload: string) => (dispatch: any) =>\n  dispatch({\n    type: Actions.UPDATE_RECORD_LIST,\n    payload,\n  })\n\nexport const deleteRecordDraft = () => (dispatch: any) =>\n  dispatch({\n    type: Actions.DELETE_RECORD_DRAFT,\n  })\n","import { gql } from '@apollo/client'\n\nexport const SUBSCRIBE_READING = gql`\n  subscription {\n    reading\n  }\n`\n","export const STATUS_CODES = {\n  ok: 'OK',\n  error: 'ERROR',\n  loading: 'LOADING',\n}\n","import { connect } from 'react-redux'\nimport './Scoreboard.scss'\nimport { updateReading } from '../../state/actions/scoreboard.action'\nimport { updateUIState } from '../../state/actions/ui.action'\nimport { deleteRecordDraft } from '../../state/actions/record.action'\nimport React, { useEffect, useRef } from 'react'\nimport { useSubscription } from '@apollo/client'\nimport classNames from 'classnames'\nimport { SUBSCRIBE_READING } from '../../gql/subscriptions'\nimport { IonFabButton, IonIcon, IonInput } from '@ionic/react'\nimport { create, speedometer } from 'ionicons/icons'\nimport $ from 'jquery'\nimport { STATUS_CODES } from '../../model/scoreboard.model'\nimport io from 'socket.io-client'\n\nconst endpoint =\n  process.env.REACT_APP_INDICATOR_ENDPOINT || 'http://192.168.8.100:6969'\n\nconst Scoreboard = (props: any) => {\n  const sub = useSubscription(SUBSCRIBE_READING)\n\n  const now = useRef(0)\n  // props.updateReading({\n  //   receivedAt: new Date().getTime(),\n  //   weight: 0,\n  //   status: STATUS_CODES.ok,\n  // })\n\n  useEffect(() => {\n    const socket = io(endpoint)\n\n    if (!props.ui.manualInput) {\n      socket.on('reading', (data) => {\n        const now = new Date().getTime()\n\n        console.log('data', { data, now })\n        props.updateReading({\n          receivedAt: now,\n          weight: +data || 0,\n          manual: false,\n          status: STATUS_CODES.ok,\n        })\n      })\n    } else if (sub.error) {\n      props.updateReading({\n        receivedAt: new Date().getTime(),\n        weight: 0,\n        manual: false,\n        status: STATUS_CODES.error,\n      })\n    } else if (sub.loading && !props.ui.manualInput) {\n      props.updateReading({\n        receivedAt: new Date().getTime(),\n        weight: 0,\n        manual: false,\n        status: STATUS_CODES.loading,\n      })\n    } else if (sub.data && !props.ui.manualInput) {\n      // +sub.data.reading?.weight !== +props.reading?.weight &&\n      //   props.updateReading({\n      //     receivedAt: new Date().getTime(),\n      //     weight: +sub.data.reading,\n      //     status: STATUS_CODES.ok,\n      //   })\n    }\n\n    setInterval(() => {\n      now.current = new Date().getTime()\n    }, 1000)\n\n    return () => {\n      socket.off('reading')\n    }\n  }, [sub.data, sub.error, sub.loading, props])\n\n  // isNaN(+props.reading?.weight) &&\n  //   props.updateUIState({\n  //     manualInput: true,\n  //   })\n\n  const manualInput = (ev: any) => {\n    props.updateReading({\n      receivedAt: new Date().getTime(),\n      weight: +ev.detail.value,\n      manual: true,\n    })\n  }\n\n  const toggleManualInput = () => {\n    !props.ui.manualInput &&\n      props.updateReading({\n        receivedAt: new Date().getTime(),\n        weight: props.reading?.weight || 0,\n        manual: true,\n      })\n\n    props.updateUIState({\n      manualInput: !props.ui.manualInput,\n    })\n\n    setTimeout(() => {\n      $('#scoreboard-input').focus()\n    }, 300)\n  }\n\n  const isManualInput = props.ui?.manualInput //|| props.reading?.status !== STATUS_CODES.ok\n\n  return (\n    <>\n      <div\n        className={classNames({\n          scoreboard: true,\n          error:\n            props.reading?.status === STATUS_CODES.error ||\n            Math.abs(now.current - props.reading?.receivedAt) > 2000,\n          warn: props.reading?.status === STATUS_CODES.loading,\n        })}\n      >\n        <div className='scoreboard-wrap'>\n          <IonFabButton\n            onClick={() => toggleManualInput()}\n            color={isManualInput ? 'secondary' : 'success'}\n            // fill=\"clear\"\n            // size=\"large\"\n            // shape=\"round\"\n            className='manual-input-button'\n          >\n            <IonIcon icon={isManualInput ? create : speedometer} />\n          </IonFabButton>\n\n          <div className='scoreboard-text'>\n            {isManualInput ? (\n              <>\n                <IonInput\n                  id='scoreboard-input'\n                  color='secondary'\n                  autofocus={true}\n                  clearInput={true}\n                  onIonChange={manualInput}\n                  className='reading'\n                  placeholder={props.reading?.weight || 0}\n                  type='number'\n                ></IonInput>\n\n                <span\n                  className={classNames(\n                    'unit',\n                    isManualInput && 'manual-input-unit'\n                  )}\n                >\n                  KG\n                </span>\n              </>\n            ) : props.reading?.status === STATUS_CODES.ok ? (\n              <>\n                <span className='reading'>\n                  {props.reading?.weight.toLocaleString()}\n                </span>\n                <span\n                  className={classNames(\n                    'unit',\n                    props.ui.manualInput && 'manual-input-unit'\n                  )}\n                >\n                  KG\n                </span>\n              </>\n            ) : (\n              <span className='reading reading-status'>\n                {props.reading?.status}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div\n        className={classNames({\n          'status-bar': true,\n          error: props.reading?.status === STATUS_CODES.error,\n          warn: props.reading?.status === STATUS_CODES.loading,\n        })}\n      ></div>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    ui: state.ui,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateReading,\n  updateUIState,\n  deleteRecordDraft,\n})(Scoreboard)\n","export interface Vehicle {\n  id: string\n  type: number\n  createdAt: number\n  licensePlate: LicensePlate\n}\n\nexport interface LicensePlate {\n  plate: string\n  code: string\n}\n\nexport const PLATE_CODES = ['OTHER', 1, 2, 3, 4, 5]\nexport const PLATE_REGIONS = [\n  { code: 'OTHER', name: 'OTHER' },\n  { code: 'AA', name: 'ADDIS ABABA' },\n  { code: 'AF', name: 'AFAR' },\n  { code: 'AM', name: 'AMHARA' },\n  { code: 'BG', name: 'BENI SHANGUL GUMUZ' },\n  { code: 'DR', name: 'DIRE DAWA' },\n  { code: 'ET', name: 'ETHIOPIA' },\n  { code: 'GB', name: 'GAMBELLA' },\n  { code: 'HR', name: 'HARARI' },\n  { code: 'OR', name: 'OROMIA' },\n  { code: 'SI', name: 'SIDAMA' },\n  { code: 'SM', name: 'SOMALI' },\n  { code: 'SP', name: 'SOUTHERN PEOPLE' },\n  { code: 'TG', name: 'TIGRAY' },\n]\n\nexport const VEHICLE_TYPES = [\n  'PICK UP',\n  'ISUZU',\n  'FSR',\n  'SINO TRUCK',\n  'TRAILER TRUCK',\n]\n","import { gql } from '@apollo/client'\n\nexport const FETCH_RECORDS = gql`\n  query FetchRecords(\n    $query: String\n    $limit: Int\n    $page: Int\n    $vehicleId: String\n    $serial: String\n    $filters: [String]\n  ) {\n    records(\n      query: $query\n      limit: $limit\n      page: $page\n      vehicleId: $vehicleId\n      serial: $serial\n      filters: $filters\n    ) {\n      payload {\n        id\n        createdAt\n        serial\n        weights {\n          weight\n          manual\n          createdAt\n        }\n        vehicle {\n          id\n          type\n          licensePlate {\n            code\n            region {\n              code\n            }\n            plate\n          }\n        }\n        buyer {\n          id\n          name {\n            display\n          }\n          phoneNumber {\n            number\n          }\n        }\n        seller {\n          id\n          name {\n            display\n          }\n          phoneNumber {\n            number\n          }\n        }\n      }\n      count\n    }\n  }\n`\n\nexport const FETCH_RECORD = gql`\n  query FetchRecord($id: String!) {\n    record(id: $id) {\n      id\n      createdAt\n      serial\n      weights {\n        weight\n        manual\n        createdAt\n      }\n      vehicle {\n        id\n        type\n        licensePlate {\n          code\n          region {\n            code\n          }\n          plate\n        }\n      }\n      buyer {\n        id\n        name {\n          display\n        }\n        phoneNumber {\n          number\n        }\n      }\n      seller {\n        id\n        name {\n          display\n        }\n        phoneNumber {\n          number\n        }\n      }\n    }\n  }\n`\n","import classNames from 'classnames'\nimport './LicensePlate.scss'\n\nconst LicensePlate = (props: any) => {\n  return (\n    <div className={classNames('licensePlate', `code-${props.code}`)}>\n      <div className=\"licensePlateInner\">\n        <span className=\"licensePlateCode\">{props.code}</span>\n        <span className=\"licensePlateNumber\">{props.number}</span>\n        <span className=\"licensePlateRegion\">\n          {props.region?.code?.slice(0, 2)}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default LicensePlate\n","import { gql } from '@apollo/client'\n\nexport const CREATE_RECORD = gql`\n  mutation CreateRecord(\n    $weight: Int!\n    $manual: Boolean!\n    $weightTime: String\n    $vehicleId: String!\n    $sellerId: String\n    $buyerId: String\n  ) {\n    createRecord(\n      weight: $weight\n      manual: $manual\n      weightTime: $weightTime\n      vehicleId: $vehicleId\n      sellerId: $sellerId\n      buyerId: $buyerId\n    ) {\n      id\n      serial\n      createdAt\n      updatedAt\n      vehicle {\n        id\n        type\n        licensePlate {\n          code\n          plate\n          region {\n            code\n          }\n        }\n      }\n      buyer {\n        id\n        name {\n          display\n        }\n        phoneNumber {\n          number\n        }\n      }\n      seller {\n        id\n        name {\n          display\n        }\n        phoneNumber {\n          number\n        }\n      }\n    }\n  }\n`\nexport const ADD_SECOND_WEIGHT = gql`\n  mutation AddSecondWeight(\n    $recordId: String!\n    $weight: Int!\n    $manual: Boolean!\n    $createdAt: String!\n  ) {\n    addSecondWeight(\n      recordId: $recordId\n      weight: $weight\n      manual: $manual\n      createdAt: $createdAt\n    ) {\n      id\n    }\n  }\n`\n\nexport const ADD_CUSTOMER = gql`\n  mutation AddCustomer(\n    $recordId: String!\n    $customerId: String!\n    $customerType: String!\n  ) {\n    addCustomer(\n      recordId: $recordId\n      customerId: $customerId\n      customerType: $customerType\n    ) {\n      id\n    }\n  }\n`\n\nexport const PRINT_RECORD = gql`\n  mutation PrintRecord($id: String!) {\n    printRecord(id: $id)\n  }\n`\n\nexport const SEND_CONFIRMATION_SMS = gql`\n  mutation SendConfirmationSms($recordId: String!) {\n    sendConfirmationSms(recordId: $recordId)\n  }\n`\n","import { gql } from '@apollo/client'\n\nexport const FETCH_CUSTOMERS = gql`\n  query FetchCustomers($phoneNumber: String, $name: String, $limit: Int) {\n    customers(phoneNumber: $phoneNumber, name: $name, limit: $limit) {\n      id\n      createdAt\n      name {\n        display\n      }\n      phoneNumber {\n        number\n      }\n    }\n  }\n`\n\nexport const FETCH_CUSTOMER = gql`\n  query FetchCustomer($id: String) {\n    customer(id: $id) {\n      id\n      createdAt\n      name {\n        display\n      }\n      phoneNumber {\n        number\n      }\n    }\n  }\n`\n","import {\n  IonCard,\n  IonCardHeader,\n  IonChip,\n  IonItem,\n  IonItemGroup,\n  IonList,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_CUSTOMERS } from '../../gql/queries/customer.queries'\nimport './CustomerSuggestions.scss'\n\nconst CustomerSuggestions = (props: any) => {\n  const customers = useQuery(FETCH_CUSTOMERS, {\n    variables: {\n      phoneNumber:\n        props.party === 'seller'\n          ? props.draft?.seller?.phoneNumber\n          : props.draft?.buyer?.phoneNumber,\n      name:\n        props.party === 'seller'\n          ? props.draft?.seller?.name\n          : props.draft?.buyer?.name,\n      limit: 5,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const suggestions = customers.data?.customers\n\n  return (\n    <>\n      {suggestions?.length > 0 ? (\n        <IonCard>\n          <IonList lines='full' className='customer-suggestions entity-card'>\n            <IonCardHeader className='form-title'>\n              Select Existing Customer\n            </IonCardHeader>\n            <IonItemGroup>\n              {suggestions.map((customer: any) => (\n                <IonItem\n                  key={customer.id}\n                  button\n                  onClick={() =>\n                    props.onSelectCustomer(customer.id, props.party)\n                  }\n                >\n                  <div className='suggestion'>\n                    <div className='phone-number'>\n                      <IonChip>{customer.phoneNumber?.number}</IonChip>\n                    </div>\n                    <div className='name'>{customer.name?.display}</div>\n                  </div>\n                </IonItem>\n              ))}\n            </IonItemGroup>\n          </IonList>\n        </IonCard>\n      ) : (\n        ''\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(CustomerSuggestions)\n","import { gql } from '@apollo/client'\n\nexport const CREATE_CUSTOMER = gql`\n  mutation CreateCustomer($phoneNumber: String!, $name: String!) {\n    createCustomer(phoneNumber: $phoneNumber, name: $name) {\n      id\n      createdAt\n      name {\n        display\n      }\n      phoneNumber {\n        number\n      }\n    }\n  }\n`\n","import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonIcon,\n  IonInput,\n  IonItemDivider,\n  IonItemGroup,\n  IonLabel,\n  IonList,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport { addOutline } from 'ionicons/icons'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_CUSTOMER } from '../../gql/mutations/customer.mutations'\nimport './NewCustomerForm.scss'\n\nconst NewCustomerForm = (props: any) => {\n  const [runCreateCustomer] = useMutation(CREATE_CUSTOMER)\n\n  const createCustomer = () => {\n    if (customer && customer.phoneNumber && customer.name) {\n      runCreateCustomer({\n        variables: {\n          name: customer.name,\n          phoneNumber: '09' + customer.phoneNumber,\n        },\n      })\n        .then((plate) => {\n          const customerId = plate.data.createCustomer.id\n\n          props.onSelectCustomer(customerId, props.party)\n        })\n        .catch(console.error)\n    } else {\n      alert('Customer information incomplete')\n    }\n  }\n\n  const onNameChange = (ev: any) => {\n    const name = ev.detail?.value\n    console.log('change', name)\n\n    const draft =\n      props.party === 'seller'\n        ? {\n            seller: {\n              ...props.draft.seller,\n              name,\n            },\n          }\n        : {\n            buyer: {\n              ...props.draft.buyer,\n              name,\n            },\n          }\n\n    props.updateRecordDraft({\n      ...props.draft,\n      ...draft,\n    })\n  }\n\n  const customer =\n    props.party === 'seller' ? props.draft?.seller : props.draft?.buyer\n\n  return (\n    <IonCard className='entity-card'>\n      <IonList lines='full' className='vehicle-suggestions'>\n        <IonItemGroup>\n          <IonItemDivider>\n            <IonLabel>Add New Customer</IonLabel>\n          </IonItemDivider>\n        </IonItemGroup>\n      </IonList>\n\n      <IonCardContent className='customer-form'>\n        <div className='name-wrap'>\n          <IonLabel>{props.party}'s Name:</IonLabel>\n          <IonInput\n            onIonChange={onNameChange}\n            type='text'\n            placeholder='Enter Customer Name'\n          />\n        </div>\n        <div className='phone-number-wrap'>\n          <IonLabel>Phone Number: </IonLabel>\n          <div className='phone-number'>09{customer?.phoneNumber}</div>\n        </div>\n      </IonCardContent>\n\n      <IonButton\n        expand='full'\n        onClick={createCustomer}\n        disabled={\n          !customer ||\n          !customer.name ||\n          customer.name.length < 3 ||\n          !customer.phoneNumber ||\n          customer.phoneNumber.length < 8\n        }\n      >\n        <IonIcon icon={addOutline} />\n        Create New Customer\n      </IonButton>\n    </IonCard>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(NewCustomerForm)\n","import {\n  IonButton,\n  IonCard,\n  IonCardHeader,\n  IonIcon,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonText,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport CustomerSuggestions from './CustomerSuggestions'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_CUSTOMERS } from '../../gql/queries/customer.queries'\nimport NewCustomerForm from './NewCustomerForm'\nimport './CustomerForm.scss'\nimport { chevronForward } from 'ionicons/icons'\n\nconst CustomerForm = (props: any) => {\n  const customers = useQuery(FETCH_CUSTOMERS, {\n    variables: {\n      phoneNumber: props.draft?.buyer?.phoneNumber,\n      name: props.draft?.buyer?.name,\n      limit: 5,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  useEffect(() => {\n    return () => customers.data\n  }, [customers.data])\n\n  const onNameChange = (ev: any) => {\n    const name = ev.detail?.value.trim()\n    const draft =\n      props.party === 'seller'\n        ? {\n            seller: {\n              ...props.draft?.seller,\n              name,\n            },\n          }\n        : {\n            buyer: {\n              ...props.draft?.buyer,\n              name,\n            },\n          }\n    props.updateRecordDraft({\n      ...props.draft,\n      ...draft,\n    })\n    customers.refetch()\n  }\n\n  const onPhoneNumberChange = (ev: any) => {\n    const number = ev.detail?.value\n      .split(/[^0-9]/)\n      .join('')\n      .trim()\n\n    ev.target.value = number\n\n    const draft =\n      props.party === 'seller'\n        ? {\n            seller: {\n              ...props.draft?.seller,\n              phoneNumber: number,\n            },\n          }\n        : {\n            buyer: {\n              ...props.draft?.buyer,\n              phoneNumber: number,\n            },\n          }\n\n    props.updateRecordDraft({\n      ...props.draft,\n      ...draft,\n    })\n\n    customers.refetch()\n  }\n\n  const onSkip = () => {\n    const skip =\n      props.party === 'seller'\n        ? {\n            skipSeller: true,\n          }\n        : {\n            skipBuyer: true,\n          }\n\n    props.updateRecordDraft({\n      ...props.draft,\n      ...skip,\n    })\n  }\n\n  const draft =\n    props.party === 'seller' ? props.draft?.seller : props.draft?.buyer\n\n  return (\n    <>\n      <IonCard className='customer-form entity-card'>\n        {!props.noTitle && (\n          <IonCardHeader className='form-title'>\n            Add {props.party || 'Customer'}\n            <IonButton fill='clear' onClick={onSkip} className='justify-right'>\n              Skip\n              <IonIcon icon={chevronForward} />\n            </IonButton>\n          </IonCardHeader>\n        )}\n        <IonItem>\n          <IonLabel className='uppercase'>\n            {props.party || 'Customer'}'s Phone:\n          </IonLabel>\n          <div className='phone-input'>\n            <IonText>09</IonText>\n            <IonInput\n              onIonChange={onPhoneNumberChange}\n              type='tel'\n              debounce={500}\n              maxlength={8}\n              size={8}\n              required\n              autofocus\n              placeholder='12345678'\n              // clearInput\n            />\n          </div>\n        </IonItem>\n\n        <IonItem>\n          <IonLabel className='uppercase'>\n            {props.party || 'Customer'}'s Name:\n          </IonLabel>\n          <div className='name-input'>\n            <IonInput\n              onIonChange={onNameChange}\n              type='text'\n              debounce={500}\n              maxlength={20}\n              placeholder='Enter Name'\n              clearInput\n            />\n          </div>\n        </IonItem>\n\n        <div className='card-footer'></div>\n      </IonCard>\n\n      {(draft?.phoneNumber || draft?.name) && (\n        <>\n          {customers.data?.customers?.length > 0 && (\n            <CustomerSuggestions\n              onSelectCustomer={props.onSelectCustomer}\n              party={props.party}\n            />\n          )}\n          {customers.data?.customers?.filter((customer: any) => {\n            const suggestion = customer.phoneNumber\n            const phoneNumber = draft?.phoneNumber\n\n            return suggestion.number === '09' + phoneNumber\n          }).length === 0 && (\n            <NewCustomerForm\n              onSelectCustomer={props.onSelectCustomer}\n              party={props.party}\n            />\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(CustomerForm)\n","import React, { useState } from 'react'\nimport './RecordItem.scss'\n\nimport {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonChip,\n  IonIcon,\n  IonItem,\n  IonLabel,\n  IonList,\n  IonToast,\n  useIonPopover,\n} from '@ionic/react'\nimport {\n  addOutline,\n  alertCircleOutline,\n  chevronForward,\n  closeOutline,\n  create,\n  menuOutline,\n  personAddOutline,\n  print,\n  send,\n  refreshOutline,\n} from 'ionicons/icons'\nimport moment from 'moment'\nimport LicensePlate from '../LicensePlate/LicensePlate'\nimport { connect } from 'react-redux'\nimport {\n  updateRecordResult,\n  deleteRecordDraft,\n  updateRecordDraft,\n} from '../../state/actions/record.action'\nimport { useMutation, useQuery } from '@apollo/client'\nimport {\n  ADD_CUSTOMER,\n  ADD_SECOND_WEIGHT,\n  CREATE_RECORD,\n  SEND_CONFIRMATION_SMS,\n} from '../../gql/mutations/record.mutations'\nimport { VEHICLE_TYPES } from '../../model/vehicle.model'\nimport { PRINT_RECORD } from '../../gql/mutations/record.mutations'\nimport classNames from 'classnames'\nimport { FETCH_RECORD, FETCH_RECORDS } from '../../gql/queries/record.queries'\nimport { updateUIState } from '../../state/actions/ui.action'\nimport CustomerForm from '../Form/CustomerForm'\n\nconst RecordItem = (props: any) => {\n  const record = props.record\n  const [printRecord] = useMutation(PRINT_RECORD)\n  const [sendConfirmationSms] = useMutation(SEND_CONFIRMATION_SMS)\n  const [runCreateRecord] = useMutation(CREATE_RECORD)\n\n  const [addSecondWeightMutation] = useMutation(ADD_SECOND_WEIGHT)\n  const [addCustomerMutation] = useMutation(ADD_CUSTOMER)\n\n  const [showPrintingToast, setPrinting] = useState(false)\n  const [isResultPaid, setResultPaid] = useState(false)\n\n  const PopoverList: React.FC<{\n    onHide: () => void\n  }> = ({ onHide }) => (\n    <IonList>\n      {/* {record.seller || record.buyer ? ( */}\n      <IonItem\n        button\n        onClick={() => {\n          onSendSMS()\n          onHide()\n        }}\n      >\n        <IonIcon icon={send} />\n        <IonLabel>Send SMS</IonLabel>\n      </IonItem>\n      {/* ) : (\n        <></>\n      )} */}\n      <IonItem\n        button\n        onClick={() => {\n          onPrint()\n          onHide()\n        }}\n      >\n        <IonIcon icon={print} />\n        <IonLabel>Print</IonLabel>\n      </IonItem>\n      <IonItem lines='none' detail={false} button onClick={onHide}>\n        Close\n      </IonItem>\n    </IonList>\n  )\n\n  const [presentPopover, dismissPopover] = useIonPopover(PopoverList, {\n    onHide: () => dismissPopover(),\n  })\n\n  const recordQuery = useQuery(FETCH_RECORD, {\n    variables: {\n      id: props.record?.id,\n    },\n    skip: !props.record?.id,\n    fetchPolicy: 'network-only',\n  })\n\n  const formatDate = (date: number) =>\n    moment(date).format('dddd - MMM DD, YYYY - h:mm a')\n\n  const getNetWeight = () => {\n    const firstWeight = record.weights[0].weight\n    const secondWeight = record.weights[1]?.weight || weightDraft()?.weight\n\n    return secondWeight\n      ? Math.abs(firstWeight - secondWeight).toLocaleString() + ' KG'\n      : '...'\n  }\n\n  const weightDraft = () => {\n    return props.draft?.reading || props.secondWeightDraft\n  }\n\n  const onSaveSecondWeight = () => {\n    console.log(weightDraft())\n    addSecondWeightMutation({\n      variables: {\n        recordId: record.id,\n        weight: weightDraft().weight,\n        manual: weightDraft().manual,\n        createdAt: weightDraft().receivedAt.toString(),\n      },\n      update: () => {\n        recordQuery.refetch()\n      },\n    })\n\n    props.updateRecordResult(record.id)\n\n    props.deleteRecordDraft()\n  }\n\n  const onPrint = () => {\n    setPrinting(true)\n\n    printRecord({\n      variables: {\n        id: record.id,\n      },\n    })\n      .then(() => {})\n      .catch(console.error)\n\n    // sendConfirmationSms({\n    //   variables: {\n    //     recordId: record.id,\n    //   },\n    // }).catch(console.error)\n  }\n\n  const onSendSMS = () => {\n    sendConfirmationSms({\n      variables: {\n        recordId: record.id,\n      },\n    }).catch(console.error)\n  }\n\n  const recordReading = () => {\n    if (props.reading) {\n      props.updateRecordDraft({\n        ...props.draft,\n        reading: props.reading,\n        licensePlate: {\n          plate: props.draft?.licensePlate?.plate || '',\n          code: props.draft?.licensePlate?.code || 3,\n          region: props.draft?.licensePlate?.region || 'AA',\n        },\n      })\n    }\n  }\n\n  const getPrice = (type: number) => {\n    switch (type) {\n      case 0:\n        return 80\n      case 1:\n        return 100\n      case 2:\n        return 150\n      case 3:\n        return 200\n      case 4:\n        return 250\n      default:\n        return 0\n    }\n  }\n\n  const makeNewRecord = (weight: number, weightTime: string) => {\n    runCreateRecord({\n      variables: {\n        weight,\n        manual: props.draft?.reading?.manual || false,\n        weightTime,\n        vehicleId: record.vehicle?.id,\n        sellerId: undefined,\n        buyerId: undefined,\n      },\n      update: (cache, { data }) => {\n        const result = data?.createRecord.record\n        const current = cache.readQuery({\n          query: FETCH_RECORDS,\n        }) as any\n\n        cache.writeQuery({\n          query: FETCH_RECORDS,\n          data: [...current.records.payload, result],\n        })\n      },\n    }).then((record) => {\n      props.updateRecordResult(record.data.createRecord.id)\n      props.deleteRecordDraft()\n\n      if (props.result) {\n        // recordQuery.refetch()\n        // selectedVehicleRecords.refetch()\n      }\n    })\n\n    // props.updateRecordDraft({\n    //   ...props.draft,\n    //   recordId: record.id,\n    //   reading: props.reading || 0,\n    // })\n  }\n\n  const addCustomer = (party: string) => {\n    props.updateUIState({\n      addCustomerForm: {\n        party,\n        recordId: record.id,\n      },\n    })\n  }\n\n  const onAddCustomer = (customerId: string, customerType: string) => {\n    console.log(record.id, customerId, customerType)\n    addCustomerMutation({\n      variables: {\n        recordId: record.id,\n        customerId,\n        customerType,\n      },\n      update: () => {\n        recordQuery.refetch()\n      },\n    })\n\n    resetCustomerForm()\n  }\n\n  const resetCustomerForm = () => {\n    props.updateUIState({\n      addCustomerForm: undefined,\n    })\n  }\n\n  const isSynced = () => props.reading?.weight === props.draft?.reading?.weight\n\n  const isLoaded = () => props.draft?.reading?.weight > 1000\n\n  return (\n    <>\n      {record && (\n        <>\n          <IonCard className='record-card'>\n            {/* <pre>{JSON.stringify(record)}</pre> */}\n            <div className='card-left-content'>\n              <IonList>\n                {record?.serial && (\n                  <IonItem className='serial-row'>\n                    <IonLabel>\n                      <h2>\n                        Serial: <span>{record.serial}</span>\n                      </h2>\n                    </IonLabel>\n                  </IonItem>\n                )}\n                <IonItem>\n                  <LicensePlate\n                    code={record?.vehicle?.licensePlate?.code}\n                    region={record?.vehicle?.licensePlate?.region}\n                    number={record?.vehicle?.licensePlate?.plate}\n                  />\n                </IonItem>\n                <IonItem>\n                  <IonLabel>\n                    <h2>Vehicle Type</h2>\n                    <IonChip color='tertiary'>\n                      {VEHICLE_TYPES[record?.vehicle?.type] || 'Unknown'}\n                    </IonChip>\n                  </IonLabel>\n                </IonItem>\n                {record?.buyer ? (\n                  <IonItem className='customer-row'>\n                    <IonLabel>\n                      <h2>Buyer</h2>\n                      <div>\n                        <div className='name'>{record.buyer.name?.display}</div>\n                        <IonChip>{record.buyer.phoneNumber?.number}</IonChip>\n                      </div>\n                    </IonLabel>\n                  </IonItem>\n                ) : (\n                  <>\n                    <IonItem button onClick={() => addCustomer('buyer')}>\n                      <IonIcon icon={personAddOutline} />\n                      <IonLabel>Add Buyer</IonLabel>\n                    </IonItem>\n                  </>\n                )}\n                {record?.seller ? (\n                  <IonItem className='customer-row'>\n                    <IonLabel>\n                      <h2>Seller</h2>\n                      <div>\n                        <div className='name'>\n                          {record.seller.name?.display}\n                        </div>\n                        <IonChip>{record.seller.phoneNumber?.number}</IonChip>\n                      </div>\n                    </IonLabel>\n                  </IonItem>\n                ) : (\n                  <IonItem button onClick={() => addCustomer('seller')}>\n                    <IonIcon icon={personAddOutline} />\n                    <IonLabel>Add Seller</IonLabel>\n                  </IonItem>\n                )}\n              </IonList>\n            </div>\n\n            <div className='card-right-content'>\n              <div className='weight-entry first-weight'>\n                <h3>First Weight</h3>\n                <span className='record-date'>\n                  {formatDate(+record?.weights[0]?.createdAt)}\n                </span>\n\n                <div\n                  className={classNames(\n                    'weight-measure',\n                    record?.weights[0]?.manual && 'manual-input'\n                  )}\n                >\n                  {record?.weights[0]?.weight.toLocaleString()} KG\n                  {record?.weights[0]?.manual && (\n                    <IonChip color='secondary'>\n                      <IonIcon icon={create} />\n                      <IonLabel>Manual</IonLabel>\n                    </IonChip>\n                  )}\n                </div>\n\n                {record?.weights[1] &&\n                  moment(+record.weights[0].createdAt).isAfter(\n                    moment().subtract(2, 'days')\n                  ) && (\n                    <IonButton\n                      onClick={() =>\n                        makeNewRecord(\n                          record.weights[0].weight,\n                          record.weights[0].createdAt\n                        )\n                      }\n                      className='use-record-button'\n                      color='success'\n                      fill='outline'\n                    >\n                      <IonIcon icon={addOutline}></IonIcon>\n                      New Record\n                    </IonButton>\n                  )}\n              </div>\n\n              {props.type === 'result' && !record?.weights[1] ? (\n                <IonCard\n                  className='price-card'\n                  color={isResultPaid ? 'success' : 'warning'}\n                >\n                  <h1>{getPrice(record.vehicle.type)} BIRR</h1>\n\n                  {!isResultPaid && (\n                    <IonCardContent>\n                      <IonButton\n                        onClick={() => {\n                          setResultPaid(true)\n                        }}\n                        expand='block'\n                        color='light'\n                        size='large'\n                        slot='end'\n                      >\n                        Paid\n                      </IonButton>\n                    </IonCardContent>\n                  )}\n                </IonCard>\n              ) : (\n                <>\n                  {!record?.weights[1] && !weightDraft() ? (\n                    <></>\n                  ) : (\n                    <>\n                      <div className='weight-entry second-weight'>\n                        <h3>Second Weight</h3>\n                        {record?.weights[1] ? (\n                          <>\n                            <span className='record-date'>\n                              {formatDate(+record.weights[1]?.createdAt)}\n                            </span>\n                            <div\n                              className={classNames(\n                                'weight-measure',\n                                record?.weights[1]?.manual && 'manual-input'\n                              )}\n                            >\n                              {record.weights[1].weight.toLocaleString()} KG\n                              {record?.weights[1]?.manual && (\n                                <IonChip color='secondary'>\n                                  <IonIcon icon={create} />\n                                  <IonLabel>Manual</IonLabel>\n                                </IonChip>\n                              )}\n                            </div>\n                            {moment(+record.weights[1].createdAt).isAfter(\n                              moment().subtract(2, 'days')\n                            ) && (\n                              <IonButton\n                                onClick={() =>\n                                  makeNewRecord(\n                                    record.weights[1].weight,\n                                    record.weights[1].createdAt\n                                  )\n                                }\n                                className='use-record-button'\n                                color='success'\n                                fill='outline'\n                              >\n                                <IonIcon icon={addOutline}></IonIcon>\n                                New Record\n                              </IonButton>\n                            )}\n                          </>\n                        ) : (\n                          <>\n                            {weightDraft() ? (\n                              <>\n                                <span className='record-date'>\n                                  {formatDate(+weightDraft().receivedAt)}\n                                </span>\n                                <div\n                                  className={classNames(\n                                    'weight-measure',\n                                    isLoaded() && isSynced()\n                                      ? 'green-draft'\n                                      : 'red-draft'\n                                  )}\n                                >\n                                  {weightDraft().weight.toLocaleString()} KG\n                                  {!isSynced() && (\n                                    <IonButton\n                                      className='update-button'\n                                      onClick={recordReading}\n                                      color='dark'\n                                      shape='round'\n                                      size='small'\n                                      fill='clear'\n                                    >\n                                      <IonIcon icon={refreshOutline} />\n                                    </IonButton>\n                                  )}\n                                </div>\n                              </>\n                            ) : true ? (\n                              <>\n                                <span className='record-pending'>Pending</span>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      {(weightDraft() || record.weights[1]) && (\n                        <div className='weight-entry net-weight'>\n                          <h3>Net Weight</h3>\n                          <span className='record-date'>\n                            {record?.weights[0] &&\n                              moment(\n                                +record.weights[1]?.createdAt ||\n                                  new Date().getTime()\n                              ).from(+record.weights[0]?.createdAt)}\n                          </span>\n                          <div className='weight-measure'>{getNetWeight()}</div>\n                        </div>\n                      )}\n                    </>\n                  )}\n                </>\n              )}\n\n              {weightDraft() ? (\n                <div\n                  className={classNames({\n                    'bottom-button': true,\n                    'danger-button': !isLoaded() || !isSynced(),\n                    'warn-button': moment(\n                      +record.weights[0].createdAt\n                    ).isBefore(moment().subtract(2, 'days')),\n                  })}\n                >\n                  {!record?.weights[1] &&\n                    moment(+record?.weights[0].createdAt).isBefore(\n                      moment().subtract(2, 'days')\n                    ) && (\n                      <>\n                        <IonButton\n                          color='warning'\n                          disabled\n                          className='time-warning'\n                        >\n                          <IonIcon icon={alertCircleOutline} />\n                          <IonLabel>\n                            {moment(+record?.weights[0].createdAt).fromNow()}\n                          </IonLabel>\n                        </IonButton>\n                      </>\n                    )}\n                  <IonButton\n                    onClick={onSaveSecondWeight}\n                    size='large'\n                    expand='block'\n                  >\n                    Use Second Weight\n                    <IonIcon icon={chevronForward} />\n                  </IonButton>\n                </div>\n              ) : (\n                <>\n                  {props.type === 'result' &&\n                    !record?.weights[1] &&\n                    (record.weights[1] ||\n                      props.type !== 'result' ||\n                      isResultPaid) && (\n                      <div className='right-button'>\n                        {/* {record.seller || record.buyer ? ( */}\n                        <IonButton onClick={onSendSMS}>\n                          <IonIcon icon={send} />\n                          Send SMS\n                        </IonButton>\n                        {/* ) : (\n                          <></>\n                        )} */}\n                        <IonButton onClick={onPrint}>\n                          <IonIcon icon={print} />\n                          Print\n                        </IonButton>\n                      </div>\n                    )}\n                  <div className='right-button'>\n                    <IonButton\n                      size='large'\n                      onClick={(e) =>\n                        presentPopover({\n                          event: e.nativeEvent,\n                        })\n                      }\n                    >\n                      <IonIcon icon={menuOutline} />\n                    </IonButton>\n                  </div>\n                </>\n              )}\n            </div>\n          </IonCard>\n          {props.ui.addCustomerForm &&\n            props.ui.addCustomerForm.recordId === record.id && (\n              <IonCard className='add-customer-card'>\n                <IonButton\n                  shape='round'\n                  fill='clear'\n                  color='danger'\n                  onClick={resetCustomerForm}\n                >\n                  <IonIcon icon={closeOutline} />\n                  Cancel\n                </IonButton>\n                <CustomerForm\n                  noTitle\n                  party={props.ui.addCustomerForm.party}\n                  type='card-form'\n                  onSelectCustomer={onAddCustomer}\n                />\n              </IonCard>\n            )}\n          <IonToast\n            color='success'\n            cssClass='printing-toast'\n            isOpen={showPrintingToast}\n            onDidDismiss={() => setPrinting(false)}\n            message='PRINTING...'\n            duration={2000}\n          />\n        </>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n    ui: state.ui,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordResult,\n  updateRecordDraft,\n  deleteRecordDraft,\n  updateUIState,\n})(RecordItem)\n","import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonIcon,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport { closeCircleOutline, refreshOutline } from 'ionicons/icons'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport classNames from 'classnames'\nimport './RecordedWeight.scss'\n\nconst RecordedWeight = (props: any) => {\n  const onClear = () => {\n    props.deleteRecordDraft()\n  }\n\n  const isUpdated = () => props.reading?.weight === props.draft?.reading?.weight\n\n  const isOutdated = () =>\n    props.reading?.receivedAt - 1000 < props.draft?.reading?.receivedAt\n\n  const isLoaded = () => props.draft?.reading?.weight >= 1000\n\n  return (\n    <IonCard\n      className={classNames(\n        'current-weight-card',\n        'entity-card',\n        isLoaded() && isUpdated() && !isOutdated() ? 'green-card' : 'red-card'\n      )}\n    >\n      <IonCardHeader>\n        <div>Recorded Weight</div>\n\n        <IonButton\n          onClick={onClear}\n          shape='round'\n          fill='clear'\n          color={isLoaded() && isUpdated() && !isOutdated() ? 'light' : 'dark'}\n        >\n          <IonIcon slot='start' icon={closeCircleOutline}></IonIcon>\n          Clear\n        </IonButton>\n      </IonCardHeader>\n      <IonCardContent>\n        <div className='current-weight-measure'>\n          {props.draft?.reading?.weight.toLocaleString()} KG\n          {(!isUpdated() || isOutdated()) && (\n            <IonButton\n              onClick={props.onRecord}\n              shape='round'\n              fill='solid'\n              color='dark'\n            >\n              <IonIcon slot='start' icon={refreshOutline}></IonIcon>\n              Update\n            </IonButton>\n          )}\n        </div>\n      </IonCardContent>\n    </IonCard>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(RecordedWeight)\n","import { gql } from '@apollo/client'\n\nexport const FETCH_VEHICLES = gql`\n  query FetchVehicles($query: String, $limit: Int) {\n    vehicles(query: $query, limit: $limit) {\n      id\n      type\n      licensePlate {\n        plate\n        code\n        region {\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const FETCH_VEHICLE = gql`\n  query FetchVehicle($id: String) {\n    vehicle(id: $id) {\n      id\n      type\n      licensePlate {\n        plate\n        code\n        region {\n          code\n        }\n      }\n    }\n  }\n`\n","import {\n  IonCard,\n  IonChip,\n  IonItem,\n  IonItemDivider,\n  IonItemGroup,\n  IonLabel,\n  IonList,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  updateRecordQuery,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport LicensePlate from '../LicensePlate/LicensePlate'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_VEHICLES } from '../../gql/queries/vehicle.queries'\nimport { FETCH_RECORDS } from '../../gql/queries/record.queries'\nimport { VEHICLE_TYPES } from '../../model/vehicle.model'\n\nconst VehicleSuggestions = (props: any) => {\n  const vehicles = useQuery(FETCH_VEHICLES, {\n    variables: {\n      query: props.draft?.licensePlate?.plate,\n      limit: 5,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const selectedVehicleRecords = useQuery(FETCH_RECORDS, {\n    variables: {\n      vehicleId: props.draft?.vehicleId,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const onSelectPlate = (vehicle: any) => {\n    selectedVehicleRecords.refetch()\n\n    props.updateRecordDraft({\n      ...props.draft,\n      vehicleId: vehicle.id,\n    })\n\n    props.updateRecordQuery(vehicle.licensePlate.plate)\n  }\n\n  // const getVehicleType = (type: number) => VEHICLE_TYPES[type] || 'UNKNOWN'\n\n  return (\n    <IonCard>\n      <IonList lines='full' className='vehicle-suggestions'>\n        <IonItemGroup>\n          <IonItemDivider>\n            <IonLabel>Select Existing Vehicle</IonLabel>\n          </IonItemDivider>\n\n          {vehicles.data?.vehicles.map((vehicle: any) => (\n            <IonItem\n              key={vehicle.id}\n              button\n              onClick={() => onSelectPlate(vehicle)}\n            >\n              <LicensePlate\n                number={vehicle.licensePlate.plate}\n                region={vehicle.licensePlate.region}\n                code={vehicle.licensePlate.code}\n              />\n\n              <IonChip color='secondary'>\n                {VEHICLE_TYPES[vehicle.type] || 'UNKNOWN'}\n              </IonChip>\n            </IonItem>\n          ))}\n        </IonItemGroup>\n      </IonList>\n    </IonCard>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  updateRecordQuery,\n  deleteRecordDraft,\n})(VehicleSuggestions)\n","import { gql } from '@apollo/client'\n\nexport const CREATE_VEHICLE = gql`\n  mutation CreateVehicle(\n    $type: Int!\n    $plateNumber: String!\n    $plateCode: Int!\n    $plateRegion: String!\n  ) {\n    createVehicle(\n      type: $type\n      plateNumber: $plateNumber\n      plateCode: $plateCode\n      plateRegion: $plateRegion\n    ) {\n      id\n      type\n      licensePlate {\n        code\n        plate\n        region {\n          code\n        }\n      }\n    }\n  }\n`\nexport const UPDATE_VEHICLE = gql`\n  mutation UpdateVehicle(\n    $id: String!\n    $type: Int\n    $plateNumber: String\n    $plateCode: Int\n    $plateRegion: String\n  ) {\n    updateVehicle(\n      id: $id\n      type: $type\n      plateNumber: $plateNumber\n      plateCode: $plateCode\n      plateRegion: $plateRegion\n    ) {\n      id\n      type\n      licensePlate {\n        code\n        plate\n        region {\n          code\n        }\n      }\n    }\n  }\n`\n","import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonIcon,\n  IonItemDivider,\n  IonItemGroup,\n  IonLabel,\n  IonList,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport { VEHICLE_TYPES } from '../../model/vehicle.model'\nimport { addOutline } from 'ionicons/icons'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_VEHICLE } from '../../gql/mutations/vehicle.mutations'\nimport LicensePlate from '../LicensePlate/LicensePlate'\n\nconst NewVehicleForm = (props: any) => {\n  const [runCreateVehicle] = useMutation(CREATE_VEHICLE)\n\n  const selectVehicleType = (type: number) => {\n    props.updateRecordDraft({\n      ...props.draft,\n      vehicle: {\n        type,\n      },\n    })\n  }\n\n  const createVehicle = () => {\n    const draft = props.draft\n\n    if (\n      draft &&\n      !isNaN(draft.vehicle?.type) &&\n      draft.licensePlate?.plate &&\n      draft.licensePlate?.code &&\n      draft.licensePlate?.region\n    ) {\n      runCreateVehicle({\n        variables: {\n          type: draft.vehicle.type,\n          plateNumber: draft.licensePlate.plate,\n          plateCode: draft.licensePlate.code,\n          plateRegion: draft.licensePlate.region,\n        },\n      })\n        .then((plate) => {\n          const vehicleId = plate.data.createVehicle.id\n          props.updateRecordDraft({\n            ...props.draft,\n            vehicleId,\n            vehicle: {\n              type: draft.vehicle.type,\n            },\n          })\n        })\n        .catch(console.error)\n    } else {\n      alert('Vehicle information incomplete')\n    }\n  }\n\n  return (\n    <IonCard className='entity-card'>\n      <IonList lines='full' className='vehicle-suggestions'>\n        <IonItemGroup>\n          <IonItemDivider>\n            <IonLabel>Create New Vehicle</IonLabel>\n          </IonItemDivider>\n\n          <IonCardContent className='vehicle-form'>\n            <div className='vehicle-form-content'>\n              <div>\n                <LicensePlate\n                  number={props.draft.licensePlate.plate}\n                  code={props.draft.licensePlate.code}\n                  region={{\n                    code: props.draft.licensePlate.region,\n                  }}\n                />\n              </div>\n              <div className='vehicle-type'>\n                <IonLabel>Select Vehicle Type:</IonLabel>\n                <div>\n                  {VEHICLE_TYPES.map((type: string, i: number) => (\n                    <IonButton\n                      onClick={() => selectVehicleType(i)}\n                      shape='round'\n                      key={i}\n                      fill={\n                        props.draft.vehicle?.type === i ? 'solid' : 'outline'\n                      }\n                      color='secondary'\n                    >\n                      {type}\n                    </IonButton>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </IonCardContent>\n        </IonItemGroup>\n      </IonList>\n\n      <IonButton\n        expand='full'\n        onClick={createVehicle}\n        disabled={\n          props.draft?.licensePlate?.plate?.length < 5 ||\n          isNaN(props.draft?.vehicle?.type)\n        }\n      >\n        <IonIcon icon={addOutline} />\n        Create New Vehicle\n      </IonButton>\n    </IonCard>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(NewVehicleForm)\n","import {\n  IonCard,\n  IonInput,\n  IonItem,\n  IonSelect,\n  IonSelectOption,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n  updateRecordQuery,\n} from '../../state/actions/record.action'\nimport { PLATE_CODES, PLATE_REGIONS } from '../../model/vehicle.model'\nimport VehicleSuggestions from './VehicleSuggestions'\nimport NewVehicleForm from './NewVehicleForm'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_VEHICLES } from '../../gql/queries/vehicle.queries'\nimport { updateUIState } from '../../state/actions/ui.action'\n\nconst LicensePlateForm = (props: any) => {\n  const vehicles = useQuery(FETCH_VEHICLES, {\n    variables: {\n      query: props.draft?.licensePlate?.plate,\n      limit: 5,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  useEffect(() => {\n    return () => vehicles.data\n  }, [vehicles.data])\n\n  const onPlateNumberChange = (ev: any) => {\n    const plate = ev.detail?.value\n      .split(/[^a-zA-Z0-9]/)\n      .join('')\n      .trim()\n      .toUpperCase()\n\n    ev.target.value = plate\n\n    props.updateRecordDraft({\n      ...props.draft,\n      licensePlate: {\n        ...props.draft?.licensePlate,\n        plate,\n      },\n    })\n\n    props.updateRecordQuery(props.draft?.licensePlate.plate)\n\n    props.updateUIState({\n      page: 0,\n    })\n\n    vehicles.refetch()\n  }\n\n  const onPlateCodeChange = (ev: any) => {\n    const code = ev.detail?.value\n    props.updateRecordDraft({\n      ...props.draft,\n      licensePlate: {\n        ...props.draft?.licensePlate,\n        code,\n      },\n    })\n\n    vehicles.refetch()\n  }\n\n  const onPlateRegionChange = (ev: any) => {\n    const region = ev.detail?.value\n    props.updateRecordDraft({\n      ...props.draft,\n      licensePlate: {\n        ...props.draft?.licensePlate,\n        region,\n      },\n    })\n\n    vehicles.refetch()\n  }\n\n  return (\n    <>\n      <IonCard className='license-plate-form entity-card'>\n        <IonItem>\n          <IonInput\n            id='license-plate-input'\n            onIonChange={onPlateNumberChange}\n            debounce={500}\n            maxlength={6}\n            size={6}\n            required\n            autofocus\n            pattern='/[a-zA-Z0-9]/'\n            placeholder='Enter License Plate'\n            clearInput\n            className='uppercase align-right'\n          />\n\n          <IonSelect\n            onIonChange={onPlateCodeChange}\n            value={\n              typeof props.draft?.licensePlate?.code === 'number'\n                ? props.draft.licensePlate.code\n                : 3\n            }\n            interface='popover'\n          >\n            {PLATE_CODES.map((code, index) => (\n              <IonSelectOption key={code} value={index}>\n                {typeof code === 'number' ? `CODE 0${code}` : code}\n              </IonSelectOption>\n            ))}\n          </IonSelect>\n\n          <IonSelect\n            id='plate-region-select'\n            onIonChange={onPlateRegionChange}\n            value={props.draft?.licensePlate?.region || 'AA'}\n            interface='action-sheet'\n          >\n            {PLATE_REGIONS.map((region) => (\n              <IonSelectOption key={region.code} value={region.code}>\n                {region.code !== 'OTHER' ? `[${region.code}] ` : ''}\n                {region.name}\n              </IonSelectOption>\n            ))}\n          </IonSelect>\n        </IonItem>\n      </IonCard>\n      {props.draft?.licensePlate?.plate && (\n        <>\n          {vehicles.data?.vehicles?.length > 0 && <VehicleSuggestions />}\n          {vehicles.data?.vehicles.filter((vehicle: any) => {\n            const suggestion = vehicle.licensePlate\n            const draft = props.draft.licensePlate\n\n            return (\n              suggestion.plate === draft.plate &&\n              suggestion.code === draft.code &&\n              suggestion.region.code === draft.region\n            )\n          }).length === 0 && <NewVehicleForm />}\n        </>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  updateRecordQuery,\n  deleteRecordDraft,\n  updateUIState,\n})(LicensePlateForm)\n","import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonChip,\n  IonIcon,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport { closeCircleOutline } from 'ionicons/icons'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_VEHICLE } from '../../gql/queries/vehicle.queries'\nimport LicensePlate from '../LicensePlate/LicensePlate'\n\nconst SelectedVehicleCard = (props: any) => {\n  const selectedVehicle = useQuery(FETCH_VEHICLE, {\n    variables: {\n      id: props.draft?.vehicleId,\n    },\n    fetchPolicy: 'network-only',\n  })\n  return (\n    <>\n      {selectedVehicle.data?.vehicle?.licensePlate && (\n        <IonCard className='selected-vehicle-wrap entity-card'>\n          <IonCardHeader>\n            <div>Selected Vehicle</div>\n            <IonButton\n              onClick={props.onClear}\n              fill='clear'\n              shape='round'\n              color='danger'\n            >\n              <IonIcon icon={closeCircleOutline} />\n              Clear\n            </IonButton>\n          </IonCardHeader>\n          <IonCardContent className='content-row'>\n            <div>\n              <LicensePlate\n                number={selectedVehicle.data.vehicle.licensePlate.plate}\n                code={selectedVehicle.data.vehicle.licensePlate.code}\n                region={selectedVehicle.data.vehicle.licensePlate.region}\n              />\n            </div>\n\n            <div>\n              <IonChip color='secondary'>\n                {props.getVehicleType(selectedVehicle.data.vehicle.type)}\n              </IonChip>\n            </div>\n          </IonCardContent>\n        </IonCard>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(SelectedVehicleCard)\n","import {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonIcon,\n} from '@ionic/react'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n} from '../../state/actions/record.action'\nimport { closeCircleOutline } from 'ionicons/icons'\nimport { useQuery } from '@apollo/client'\nimport { FETCH_CUSTOMER } from '../../gql/queries/customer.queries'\nimport './SelectedCustomerCard.scss'\n\nconst SelectedCustomerCard = (props: any) => {\n  const selectedCustomer = useQuery(FETCH_CUSTOMER, {\n    variables: {\n      id:\n        props.party === 'seller' ? props.draft?.sellerId : props.draft.buyerId,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const customer = selectedCustomer.data?.customer\n\n  return (\n    <>\n      {customer && (\n        <IonCard className='selected-customer-wrap entity-card'>\n          <IonCardHeader>\n            <div>Selected {props.party}</div>\n            <IonButton\n              onClick={props.onClear}\n              fill='clear'\n              shape='round'\n              color='danger'\n            >\n              <IonIcon icon={closeCircleOutline} />\n              Clear\n            </IonButton>\n          </IonCardHeader>\n          <IonCardContent className='content-row'>\n            <div className='name'>\n              {props.party}'s Name: {customer.name?.display}\n            </div>\n            <div className='phone-number'>\n              Phone Number: {customer.phoneNumber.number}\n            </div>\n          </IonCardContent>\n        </IonCard>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateRecordDraft,\n  deleteRecordDraft,\n})(SelectedCustomerCard)\n","import { IonButton, IonCard, IonIcon, IonText } from '@ionic/react'\nimport { connect } from 'react-redux'\nimport './Form.scss'\nimport { updateReading } from '../../state/actions/scoreboard.action'\nimport {\n  updateRecordDraft,\n  deleteRecordDraft,\n  updateRecordResult,\n} from '../../state/actions/record.action'\nimport {\n  addOutline,\n  closeOutline,\n  reloadOutline,\n  speedometerOutline,\n} from 'ionicons/icons'\nimport { VEHICLE_TYPES } from '../../model/vehicle.model'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { FETCH_RECORD, FETCH_RECORDS } from '../../gql/queries/record.queries'\nimport $ from 'jquery'\nimport React from 'react'\nimport RecordItem from '../Record/RecordItem'\nimport { CREATE_RECORD } from '../../gql/mutations/record.mutations'\nimport RecordedWeight from './RecordedWeight'\nimport LicensePlateForm from './LicensePlateForm'\nimport SelectedVehicleCard from './SelectedVehicleCard'\nimport classNames from 'classnames'\nimport CustomerForm from './CustomerForm'\nimport SelectedCustomerCard from './SelectedCustomerCard'\nimport { updateUIState } from '../../state/actions/ui.action'\n\nconst Form = (props: any) => {\n  const [runCreateRecord] = useMutation(CREATE_RECORD)\n  const recordQuery = useQuery(FETCH_RECORD, {\n    variables: {\n      id: props.result,\n    },\n    skip: !props.result,\n    fetchPolicy: 'network-only',\n  })\n\n  const selectedVehicleRecords = useQuery(FETCH_RECORDS, {\n    variables: {\n      vehicleId: props.draft?.vehicleId,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const selectedRecord = useQuery(FETCH_RECORD, {\n    variables: {\n      id: props.draft?.recordId,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const clearForm = () => {\n    props.deleteRecordDraft()\n    props.updateRecordResult(undefined)\n\n    props.updateUIState({\n      page: 0,\n    })\n  }\n\n  const clearSelectedVehicle = () => {\n    props.updateRecordDraft({\n      ...props.draft,\n      vehicleId: undefined,\n      vehicle: undefined,\n    })\n\n    props.updateUIState({\n      page: 0,\n    })\n  }\n\n  const clearSelectedBuyer = () => {\n    props.updateRecordDraft({\n      ...props.draft,\n      buyerId: undefined,\n      buyer: undefined,\n    })\n  }\n\n  const clearSelectedSeller = () => {\n    props.updateRecordDraft({\n      ...props.draft,\n      sellerId: undefined,\n      seller: undefined,\n    })\n  }\n\n  const isSynced = () => props.reading?.weight === props.draft?.reading?.weight\n\n  const isLoaded = () => props.draft?.reading?.weight >= 1000\n\n  const recordReading = (\n    skipBuyer: boolean = false,\n    skipSeller: boolean = false\n  ) => {\n    clearForm()\n\n    if (props.reading) {\n      props.updateRecordDraft({\n        ...props.draft,\n        reading: props.reading,\n        licensePlate: {\n          plate: props.draft?.licensePlate?.plate || '',\n          code: props.draft?.licensePlate?.code || 3,\n          region: props.draft?.licensePlate?.region || 'AA',\n        },\n        skipBuyer: props.draft?.skipBuyer || skipBuyer,\n        skipSeller: props.draft?.skipSeller || skipSeller,\n      })\n\n      setTimeout(() => {\n        const input = $('#license-plate-input').find('input').first()\n        input.trigger('focus')\n        input.val = props.draft?.licensePlate?.plate\n      }, 200)\n    }\n  }\n\n  const createRecord = () => {\n    const draft = props.draft\n\n    if (draft && !isNaN(draft.reading?.weight) && draft.licensePlate?.plate) {\n      runCreateRecord({\n        variables: {\n          weight: draft.reading.weight,\n          manual: draft.reading.manual || false,\n          vehicleId: draft.vehicleId,\n          sellerId: draft.sellerId || undefined,\n          buyerId: draft.buyerId || undefined,\n        },\n        update: (cache, { data }) => {\n          const result = data?.createRecord.record\n          const current = cache.readQuery({\n            query: FETCH_RECORDS,\n          }) as any\n\n          cache.writeQuery({\n            query: FETCH_RECORDS,\n            data: [...current.records?.payload, result],\n          })\n        },\n      }).then((record) => {\n        props.updateRecordResult(record.data.createRecord.id)\n        props.deleteRecordDraft()\n\n        if (props.result) {\n          recordQuery.refetch()\n          selectedVehicleRecords.refetch()\n        }\n      })\n    } else {\n      alert('Record information incomplete')\n    }\n  }\n\n  const addParty = (type: string) => {\n    const party =\n      type === 'seller'\n        ? {\n            skipSeller: undefined,\n          }\n        : {\n            skipBuyer: undefined,\n          }\n\n    props.updateRecordDraft({\n      ...props.draft,\n      ...party,\n    })\n  }\n\n  const onSelectCustomer = (customerId: string, partyType: string) => {\n    const party =\n      partyType === 'seller'\n        ? {\n            sellerId: customerId,\n          }\n        : {\n            buyerId: customerId,\n          }\n\n    props.updateRecordDraft({\n      ...props.draft,\n      ...party,\n    })\n  }\n\n  const getVehicleType = (type: number) => {\n    return VEHICLE_TYPES[type] || 'UNKNOWN'\n  }\n\n  return (\n    <div>\n      {/* {props.draft &&\n        props.draft.vehicleId &&\n        selectedVehicleRecords.data?.records &&\n        selectedVehicleRecords.data.records\n          .filter((record: any) => record.weights.length < 2)\n          .map((pending: any) => (\n            <div key={pending.id} className='existing-record'>\n              <RecordItem\n                record={pending}\n                secondWeightDraft={props.draft.reading}\n              />\n            </div>\n          ))} */}\n\n      {props.draft && props.draft.recordId && (\n        <div key={selectedRecord.data?.record.id} className='existing-record'>\n          <RecordItem\n            record={selectedRecord.data?.record}\n            secondWeightDraft={props.draft.reading}\n          />\n        </div>\n      )}\n\n      <div className='form-wrap'>\n        {!props.draft ? (\n          <>\n            <IonCard\n              className='big-record-button'\n              color='primary'\n              button={true}\n              onClick={() => recordReading(true, true)}\n            >\n              <IonIcon icon={speedometerOutline}></IonIcon>\n              New Measurement\n            </IonCard>\n\n            {recordQuery.data ? (\n              <IonCard className='result-card'>\n                <IonButton\n                  fill='clear'\n                  size='large'\n                  expand='block'\n                  color='medium'\n                  onClick={clearForm}\n                  className='clear-form-button'\n                >\n                  <IonIcon icon={closeOutline}></IonIcon>\n                  Clear\n                </IonButton>\n                <RecordItem record={recordQuery.data.record} type='result' />\n              </IonCard>\n            ) : (\n              <></>\n            )}\n          </>\n        ) : (\n          <>\n            <RecordedWeight onRecord={recordReading} />\n\n            {!props.draft.vehicleId ? (\n              <LicensePlateForm />\n            ) : (\n              <>\n                <SelectedVehicleCard\n                  getVehicleType={getVehicleType}\n                  onClear={clearSelectedVehicle}\n                />\n\n                {!props.draft.buyerId && !props.draft.skipBuyer ? (\n                  <>\n                    {!props.draft.skipBuyer ? (\n                      <CustomerForm\n                        onSelectCustomer={onSelectCustomer}\n                        party='buyer'\n                      />\n                    ) : (\n                      ''\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <SelectedCustomerCard\n                      party='buyer'\n                      onClear={clearSelectedBuyer}\n                    />\n                    {!props.draft.sellerId ? (\n                      <>\n                        {!props.draft.skipSeller ? (\n                          <CustomerForm\n                            onSelectCustomer={onSelectCustomer}\n                            party='seller'\n                          />\n                        ) : (\n                          ''\n                        )}\n                      </>\n                    ) : (\n                      <SelectedCustomerCard\n                        party='seller'\n                        onClear={clearSelectedSeller}\n                      />\n                    )}\n                  </>\n                )}\n\n                {props.draft.skipBuyer && (\n                  <IonCard>\n                    <IonButton\n                      onClick={() => addParty('buyer')}\n                      fill='outline'\n                      expand='block'\n                    >\n                      <IonIcon icon={addOutline} />\n                      Add Buyer\n                    </IonButton>\n                  </IonCard>\n                )}\n                {props.draft.skipSeller && (\n                  <IonCard>\n                    <IonButton\n                      onClick={() => addParty('seller')}\n                      fill='outline'\n                      expand='block'\n                    >\n                      <IonIcon icon={addOutline} />\n                      Add Seller\n                    </IonButton>\n                  </IonCard>\n                )}\n              </>\n            )}\n\n            {props.draft.vehicleId &&\n              (props.draft.sellerId || props.draft.skipSeller) &&\n              (props.draft.buyerId || props.draft.skipBuyer) && (\n                <>\n                  <IonCard\n                    className={classNames({\n                      'create-button-card': true,\n                      'danger-button': !isLoaded() || !isSynced(),\n                    })}\n                  >\n                    {' '}\n                    {!isSynced() ? (\n                      <>\n                        <IonText>Weight has changed</IonText>\n                        <IonButton\n                          className='update-button'\n                          shape='round'\n                          color='secondary'\n                          fill='solid'\n                          onClick={() => recordReading()}\n                        >\n                          <IonIcon icon={reloadOutline} />\n                          Update\n                        </IonButton>\n                      </>\n                    ) : (\n                      !isLoaded() && <IonText>Weight is too small</IonText>\n                    )}\n                    <IonButton\n                      className='create-button'\n                      size='large'\n                      onClick={createRecord}\n                    >\n                      <IonIcon icon={addOutline} />\n                      Create New Record\n                    </IonButton>\n                  </IonCard>\n                </>\n              )}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    reading: state.scoreboard.reading,\n    draft: state.record.recordDraft,\n    result: state.record.recordResult,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateReading,\n  updateRecordDraft,\n  updateRecordResult,\n  deleteRecordDraft,\n  updateUIState,\n})(Form)\n","import { useQuery } from '@apollo/client'\nimport { connect } from 'react-redux'\nimport { updateReading } from '../../state/actions/scoreboard.action'\nimport {\n  updateRecordQuery,\n  updateRecordList,\n} from '../../state/actions/record.action'\nimport { updateUIState } from '../../state/actions/ui.action'\nimport './RecordList.scss'\nimport RecordItem from './RecordItem'\nimport {\n  IonButton,\n  IonCard,\n  IonCardContent,\n  IonIcon,\n  IonSearchbar,\n} from '@ionic/react'\nimport {\n  calendarClearOutline,\n  hourglassOutline,\n  chevronBack,\n  chevronForward,\n} from 'ionicons/icons'\nimport { FETCH_RECORDS } from '../../gql/queries/record.queries'\nimport * as _ from 'ramda'\n\nconst RecordList = (props: any) => {\n  // TODO: use ramda or redux\n  const recordsQuery = useQuery(FETCH_RECORDS, {\n    variables: {\n      query: props.recordQuery,\n      licensePlate: props.recordQueryLicensePlate,\n      filters: _.concat(\n        props.ui.recordFilters || [],\n        props.draft?.reading ? ['pending'] : []\n      ),\n      limit: props.ui.limit || 20,\n      page: props.ui.page || 0,\n    },\n    fetchPolicy: 'network-only',\n  })\n\n  const onQueryChange = (ev: any) => {\n    props.updateRecordQuery(ev.detail?.value)\n    props.updateUIState({\n      page: 0,\n    })\n    // recordsQuery.refetch({\n    //   query: props.recordQuery,\n    //   filters: props.ui.recordFilters,\n    // })\n  }\n\n  const toggleFilter = (filter: string) => {\n    const recordFilters = props.ui.recordFilters?.includes(filter)\n      ? _.difference([filter])(props.ui.recordFilters)\n      : _.append(filter)(props.ui.recordFilters)\n\n    props.updateUIState({\n      recordFilters,\n    })\n    // recordsQuery.refetch()\n  }\n\n  const nextPage = () => {\n    const current = +(props.ui.page || 0)\n\n    props.updateUIState({\n      page: current + 1,\n    })\n  }\n\n  const prevPage = () => {\n    const current = +(props.ui.page || 0)\n\n    props.updateUIState({\n      page: current > 0 ? current - 1 : 0,\n    })\n  }\n\n  return (\n    <div className='left-col'>\n      <IonCard className='search-card'>\n        <IonSearchbar\n          debounce={1000}\n          placeholder='Find Record'\n          onIonChange={onQueryChange}\n        />\n        <IonCardContent>\n          <IonButton\n            onClick={() => toggleFilter('pending')}\n            size='small'\n            color='primary'\n            shape='round'\n            fill={\n              props.ui.recordFilters?.includes('pending') ? 'solid' : 'outline'\n            }\n          >\n            <IonIcon icon={hourglassOutline} />\n            Pending\n          </IonButton>\n          <IonButton shape='round' fill='clear'>\n            <IonIcon icon={calendarClearOutline} />\n          </IonButton>\n        </IonCardContent>\n      </IonCard>\n\n      <div className='results-list'>\n        {recordsQuery.loading && (\n          <IonCard className='info-card'>\n            <h3>LOADING...</h3>\n          </IonCard>\n        )}\n\n        {(!recordsQuery.data ||\n          !recordsQuery.data?.records?.payload ||\n          recordsQuery.data?.records?.payload?.length === 0) && (\n          <IonCard className='info-card'>\n            <h3>NO RECORDS FOUND</h3>\n          </IonCard>\n        )}\n\n        <div className='records-wrap'>\n          {recordsQuery.data?.records.payload?.map((record: any) => (\n            <RecordItem key={record.id} record={record} />\n          ))}\n        </div>\n      </div>\n      <div className='pagination'>\n        <IonButton onClick={prevPage} disabled={props.ui.page < 1}>\n          <IonIcon icon={chevronBack}></IonIcon>\n        </IonButton>\n        Page {+(props.ui.page || 0) + 1} of{' '}\n        {Math.ceil(recordsQuery.data?.records?.count / (props.ui.limit || 20))}\n        <IonButton\n          onClick={nextPage}\n          disabled={\n            props.ui.page >=\n            Math.floor(\n              recordsQuery.data?.records?.count / (props.ui.limit || 20)\n            )\n          }\n        >\n          <IonIcon icon={chevronForward}></IonIcon>\n        </IonButton>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    recordQuery: state.record.recordQuery,\n    ui: state.ui,\n    draft: state.record.recordDraft,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  updateReading,\n  updateRecordQuery,\n  updateRecordList,\n  updateUIState,\n})(RecordList)\n","import {\n  IonContent,\n  IonHeader,\n  IonIcon,\n  IonItem,\n  IonList,\n  IonPage,\n  IonText,\n  IonToolbar,\n} from '@ionic/react'\nimport './Home.scss'\nimport Scoreboard from '../components/Scoreboard/Scoreboard'\nimport Form from '../components/Form/Form'\nimport React from 'react'\nimport RecordList from '../components/Record/RecordList'\nimport {\n  carOutline,\n  home,\n  peopleOutline,\n  settingsOutline,\n  statsChartOutline,\n} from 'ionicons/icons'\n\nconst Home: React.FC = () => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <Scoreboard />\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <div className='sidebar'>\n          <IonList>\n            <IonItem button={true} color='primary'>\n              <IonIcon icon={home} />\n              <IonText>Home</IonText>\n            </IonItem>\n\n            <IonItem button={true} onClick={() => {}}>\n              <IonIcon icon={carOutline} />\n              <IonText>Vehicles</IonText>\n            </IonItem>\n\n            <IonItem button={true}>\n              <IonIcon icon={peopleOutline} />\n              <IonText>Customers</IonText>\n            </IonItem>\n\n            <IonItem button={true}>\n              <IonIcon icon={statsChartOutline} />\n              <IonText>Reporting</IonText>\n            </IonItem>\n          </IonList>\n\n          <IonList>\n            <IonItem button={true}>\n              <IonIcon icon={settingsOutline} />\n              <IonText>Settings</IonText>\n            </IonItem>\n          </IonList>\n        </div>\n        <div className='wrap'>\n          <div className='content'>\n            <RecordList />\n            <Form />\n          </div>\n        </div>\n      </IonContent>\n    </IonPage>\n  )\n}\n\nexport default Home\n","import { Redirect, Route } from 'react-router-dom'\nimport { IonApp, IonRouterOutlet } from '@ionic/react'\nimport { IonReactRouter } from '@ionic/react-router'\nimport Home from './pages/Home'\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css'\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css'\nimport '@ionic/react/css/structure.css'\nimport '@ionic/react/css/typography.css'\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css'\nimport '@ionic/react/css/float-elements.css'\nimport '@ionic/react/css/text-alignment.css'\nimport '@ionic/react/css/text-transformation.css'\nimport '@ionic/react/css/flex-utils.css'\nimport '@ionic/react/css/display.css'\n\n/* Theme variables */\nimport './theme/variables.scss'\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  from,\n  HttpLink,\n  split,\n} from '@apollo/client'\nimport { onError } from '@apollo/client/link/error'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  graphQLErrors?.map(console.error)\n})\n\nconst serverPort = process.env.REACT_APP_SERVER_PORT || 8998\nconsole.log('server port:', serverPort)\n\nconst httpLink = from([\n  errorLink,\n  new HttpLink({\n    uri: `http://localhost:${serverPort}/`,\n  }),\n])\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:${serverPort}/graphql`,\n  options: {\n    reconnect: true,\n  },\n})\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Record: {\n        fields: {\n          serial: {\n            read(serial = '000') {\n              return serial\n            },\n          },\n        },\n      },\n    },\n  }),\n  link,\n})\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <IonApp>\n      <IonReactRouter>\n        <IonRouterOutlet>\n          <Route exact path='/'>\n            <Home />\n          </Route>\n          <Route exact path='/home'>\n            <Redirect to='/' />\n          </Route>\n        </IonRouterOutlet>\n      </IonReactRouter>\n    </IonApp>\n  </ApolloProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { combineReducers } from 'redux'\nimport { scoreboard } from './scroeboard.actor'\nimport { record } from './record.actor'\nimport { ui } from './ui.actor'\n\nexport const actors = combineReducers({\n  scoreboard,\n  record,\n  ui,\n})\n","import { Actions } from '../../model/action.model'\n\nexport const scoreboard = (state: any = [], action: any) => {\n  switch (action.type) {\n    case Actions.UPDATE_SCOREBOARD:\n      return {\n        // TODO: use immer\n        ...state,\n        reading: action.payload,\n      }\n    case Actions.RESET_SCOREBOARD:\n      return 0\n    case Actions.DELETE_RECORD_DRAFT:\n      return {\n        ...state,\n        capture: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { Actions } from '../../model/action.model'\n\nexport const record = (state = [], action: any) => {\n  switch (action.type) {\n    case Actions.UPDATE_RECORD_DRAFT:\n      return {\n        ...state,\n        recordDraft: action.payload,\n      }\n    case Actions.DELETE_RECORD_DRAFT:\n      return {\n        ...state,\n        recordDraft: undefined,\n      }\n    case Actions.UPDATE_RECORD_RESULT:\n      return {\n        ...state,\n        recordResult: action.payload,\n      }\n    case Actions.UPDATE_RECORD_QUERY:\n      return {\n        ...state,\n        recordQuery: action.payload,\n      }\n    case Actions.UPDATE_RECORD_LIST:\n      return {\n        ...state,\n        recordList: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { Actions } from '../../model/action.model'\n\nexport const ui = (state = [], action: any) => {\n  switch (action.type) {\n    case Actions.UPDATE_UI_STATE:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { actors } from './actors'\nimport thunk from 'redux-thunk'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n}\n\nconst componentEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst initialState = {}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  actors,\n  initialState,\n  // componentEnhancers(),\n  compose(applyMiddleware(...middleware), componentEnhancers())\n)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from './state/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}